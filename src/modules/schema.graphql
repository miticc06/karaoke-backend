# ------------------------ Graphql ------------------------

type Query {
  user(id: ID!): User
  users: [User]

  #### PERMISSION
  permissions: [Permission]

  #### SERVICE
  services: [Service]
  service(serviceId: String!): Service

  #### ROLE
  roles: [Role]
  role(roleId: String!): Role

  customer(id: ID!): Customer
  customers(ids: [ID]!): [Customer]

  room(roomId: String!): Room
  rooms: [Room]

  typeroom(typeroomId: String!): TypeRoom
  typerooms: [TypeRoom]

  paymentSlip(paymentSlipId: String!): PaymentSlip
  paymentSlips: [PaymentSlip]

  discount(discountId: String!): Discount
  discounts: [Discount]

  bill(id: ID!): Bill
  #service(id: ID!): Service
}

type Mutation {
  
  #### USER
  createUser(input: UserCreateInput!): User
  login(username: String!, password: String!): LoginResponse
  updateUser(userId: String!, input: UserUpdateInput!): Boolean
  deleteUser(userId: String!): Boolean

  #### PAYMENT SLIP 
  createPaymentSlip(input: PaymentSlipInput): PaymentSlip
  updatePaymentSlip(paymentSlipId: String!, input: PaymentSlipInput): PaymentSlip
  deletePaymentSlip(paymentSlipId: String!): Boolean

  #### PERMISSION
  createPermission(input: PermissionInput!): Permission
  updatePermission(permissionId: String!, input: PermissionInput!): Permission
  deletePermission(permissionId: String!): Boolean

  #### SERVICE
  createService(input: ServiceInput!): Service
  updateService(serviceId: String!, input: ServiceInput!): Service
  deleteService(serviceId: String!): Boolean

  #### ROLE
  createRole(input: RoleInput!): Role
  updateRole(roleId: String!, input: RoleInput!): Role
  deleteRole(roleId: String!): Boolean

  #### TYPEROOM
  createTypeRoom(input: TypeRoomInput!): TypeRoom
  updateTypeRoom(typeroomId: String!, input: TypeRoomInput!): TypeRoom
  deleteTypeRoom(typeroomId: String!): Boolean

  #### ROOM 
  createRoom(input: RoomInput!): Room
  updateRoom(roomId: String!, input: RoomInput!): Room
  deleteRoom(roomId: String!): Boolean

  ####DISCOUNT 
  createDiscount(input: DiscountInput!): Discount
  updateDiscount(discountId: String!, input: DiscountInput!): Discount
  deleteDiscount(discountId: String!): Boolean

  #### UTILS
  restoreDB(label: String!): Boolean
  backupDB(label: String!): Boolean
}

# ------------------------ Entity ------------------------

type User {
  _id: ID
  username: String
  # password: String
  email: String
  name: String
  createdAt: Float

  role: Role
  isActive: Boolean
}

type Customer {
  _id: ID
  name: String
  dateOfBirth: Float
  phone: String
  email: String
  points: Int
  createdAt: Float
  createdBy: User
}

type Room {
  _id: ID
  name: String
  createdAt: Float

  typeRoom: TypeRoom
  isActive: Boolean
}

type TypeRoom {
  _id: ID
  # code: String
  name: String
  unitPrice: Float
  updatedAt: Float
}

type Permission {
  _id: ID
  code: String
  name: String
}

type Role {
  _id: ID
  code: String
  name: String
  permissions: [Permission]
}

type PaymentSlip {
  _id: ID
  description: String
  price: Float
  # histories: [HistoryPaymentSlip]
  createdAt: Float
  createdBy: User
}

type Bill {
  _id: ID
  customer: Customer
  createdAt: Float
  createdBy: User
  roomDetails: [BillRoomDetails]
  serviceDetails: [BillServiceDetails]
  total: Float
}

type BillServiceDetails {
  service: Service
  startTime: Float
  endTime: Float
  quantity: Int
  total: Float
}

type BillRoomDetails {
  room: Room
  startTime: Float
  endTime: Float
  total: Float
}

type Service {
  _id: ID
  name: String
  type: TypeService
  unitPrice: Float
}

enum TypeService {
  TIME
  NUMS
}

# type TypeService {
# 	_id: ID
#   code: String
# 	name: String
# 	createdAt: Float
# }

type Discount {
  _id: ID
  name: String
  type: TypeDiscount
  value: Float

  createdAt: Float
  createdBy: User

  startDate: Float
  endDate: Float
  isActive: Boolean
}

enum TypeDiscount {
  PERCENT
  DEDUCT
}

# ------------------------ Class Support ------------------------

# type HistoryPaymentSlip {
#   createdAt: Float
#   createdBy: User
#   note: String
# }

# ------------------------ Input ------------------------

input UserCreateInput {
  username: String!
  password: String!
  email: String!
  name: String!
  roleId: String!
}

input UserUpdateInput {
  currentPassword: String
  newPassword: String
  email: String
  name: String
  roleId: String
}

input PaymentSlipInput {
  description: String!
  price: Float!
  createdAt: Float!
  createdBy: String!
}

input DiscountInput {
  name: String!
  type: TypeDiscount!
  value: Float!
  startDate: Float!
  endDate: Float!
  createdAt: Float!
  createdBy: String!
}

input PermissionInput {
  code: String!
  name: String!
}

input RoleInput {
  code: String!
  name: String!
  permissions: [String!]!
}

input ServiceInput{
  name: String!,
  price: Float!,
  type: TypeService!
}

input TypeRoomInput {
  name: String! 
  unitPrice: Float!
  updatedAt: Float!
}

input RoomInput {
  name: String!
  createdAt: Float!
  typeRoom: String!
  isActive: Boolean!
}
# ------------------------ Response ------------------------
type LoginResponse {
  token: String
}
